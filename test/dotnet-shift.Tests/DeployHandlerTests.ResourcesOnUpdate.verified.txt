[
  {
    ApiVersion: build.openshift.io/v1,
    Kind: BuildConfig,
    Metadata: {
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2,
        app.openshift.io/runtime: dotnet
      },
      Name: mycomponent-binary
    },
    Spec: {
      FailedBuildsHistoryLimit: 5,
      Output: {
        To: {
          Kind: ImageStreamTag,
          Name: mycomponent:latest
        }
      },
      Source: {
        Type: Binary
      },
      Strategy: {
        SourceStrategy: {
          From: {
            Kind: ImageStreamTag,
            Name: dotnet:4.0
          }
        },
        Type: Source
      },
      SuccessfulBuildsHistoryLimit: 5
    }
  },
  {
    ApiVersion: v1,
    Data: {
      appsettings.json:
{
}
    },
    Kind: ConfigMap,
    Metadata: {
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2
      },
      Name: mycomponent
    }
  },
  {
    ApiVersion: apps/v1,
    Kind: Deployment,
    Metadata: {
      Annotations: {
        app.openshift.io/vcs-ref: mybranch_2,
        app.openshift.io/vcs-uri: http://myurl_2,
        image.openshift.io/triggers: [{"from":{"kind":"ImageStreamTag","name":"mycomponent:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"app\")].image","pause":"false"}]
      },
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2,
        app.openshift.io/runtime: dotnet
      },
      Name: mycomponent
    },
    Spec: {
      Selector: {
        MatchLabels: {
          app: mycomponent
        }
      },
      Strategy: {
        Type: RollingUpdate
      },
      Template: {
        Metadata: {
          Labels: {
            app: mycomponent
          }
        },
        Spec: {
          Containers: [
            {
              Image: mycomponent:latest,
              Name: app,
              Ports: [
                {
                  ContainerPort1: 8080,
                  Name: http,
                  Protocol: TCP
                }
              ],
              Resources: {},
              VolumeMounts: [
                {
                  MountPath: /config,
                  Name: config-volume
                }
              ]
            }
          ],
          Volumes: [
            {
              ConfigMap: {
                Name: mycomponent
              },
              Name: config-volume
            }
          ]
        }
      }
    }
  },
  {
    ApiVersion: image.openshift.io/v1,
    Kind: ImageStream,
    Metadata: {
      Annotations: {
        openshift.io/display-name: .NET,
        openshift.io/provider-display-name: Red Hat
      },
      Name: dotnet
    },
    Spec: {
      Tags: [
        {
          Annotations: {
            openshift.io/display-name: .NET 3.0
          },
          From: {
            Kind: DockerImage,
            Name: registry.access.redhat.com/ubi8/dotnet-30:latest
          },
          ImportPolicy: {
            Scheduled: true
          },
          Name: 3.0,
          ReferencePolicy: {
            Type: Local
          }
        },
        {
          Annotations: {
            openshift.io/display-name: .NET 4.0
          },
          From: {
            Kind: DockerImage,
            Name: registry.access.redhat.com/ubi8/dotnet-40:latest
          },
          ImportPolicy: {
            Scheduled: true
          },
          Name: 4.0,
          ReferencePolicy: {
            Type: Local
          }
        }
      ]
    }
  },
  {
    ApiVersion: image.openshift.io/v1,
    Kind: ImageStream,
    Metadata: {
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2
      },
      Name: mycomponent
    }
  },
  {
    ApiVersion: route.openshift.io/v1,
    Kind: Route,
    Metadata: {
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2
      },
      Name: mycomponent
    },
    Spec: {
      Port: {
        TargetPort: 8080
      },
      To: {
        Kind: Service,
        Name: mycomponent
      }
    }
  },
  {
    ApiVersion: v1,
    Kind: Service,
    Metadata: {
      Labels: {
        app.kubernetes.io/component: mycomponent,
        app.kubernetes.io/instance: myapp_2,
        app.kubernetes.io/managed-by: dotnet-shift,
        app.kubernetes.io/name: mycomponent,
        app.kubernetes.io/part-of: myapp_2
      },
      Name: mycomponent
    },
    Spec: {
      Ports: [
        {
          Name: http,
          Port: 8080,
          Protocol: TCP
        }
      ],
      Selector: {
        app: mycomponent
      }
    }
  }
]